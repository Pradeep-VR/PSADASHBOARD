@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewBag.Title = "GraphIndex";
    var Id = ViewBag.Id;
    var Name = ViewBag.Name;
    var GName = ViewBag.GName;
    ViewBag.Heading = GName + " | " + Name + " | GRAPH"; // $"{ViewBag.Name} - {GName} - GRAPH";// GName "-" + "'@Html.Raw(Id)'" + "- GRAPH";
}

<link href="~/css/graphindex.css" rel="stylesheet" />

<div class="row">
    <div class="col-3" style="border:2px solid gray; border-radius:0px">
        <div>
            <div class="dateF">
                <div class="date-selector">
                    <label for="FromDate" style="color:black;">From Date:</label>
                    <input type="datetime-local" id="Fdate" name="fromdate">
                    <label for="ToDate" style="color:black;">To Date:</label>
                    <input type="datetime-local" id="Tdate" name="todate">
                </div>
                <div class="side-buttons">
                    <button id="viewGraphBtn" onclick="viewGraphBtn_Clicked()">View Graph</button>
                    <button id="viewDataBtn" onclick="viewDataBtn_Clicked()">View Data</button>
                </div>
            </div>
        </div>
        <div class="container1">
            <span class="arrow" style="transform: rotate(180deg); display:none;" id="btnPrev"></span>


            <label class="lblcss" style="margin: 8px 0;">Interval (mins)</label>
            <input type="number" style="    margin-top: -15px" class="form__input" id="interval" value="15" />

            <label class="lblcss" style="margin: 8px 0;">Consumption </label>
            <input type="text" id="txtConsumption"  class="form__input" value="0" readonly="readonly" style="margin-left:5px; border-color:cornflowerblue !important; border-width:1px !important;" />

            <label class="lblcss" style="margin-bottom: -10px;  ">Target Value</label>
            <input type="number" style="width:45%" class="form__input" id="targetValue" value="60" />

            <button class="form__btn" style="margin-left:245px" onclick="updateTargetLine()">Set Target</button>

            <span class="arrow" id="btnNext" style="display: none;"></span>
        </div>
    </div>
    <div class="col-9">
        <div class="chart-container" onclick="toggleControls()">
            <div class="chart-wrapper">
                <canvas id="myLineChart"></canvas>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script src="~/js/linechart.js"></script>
    <script src="~/js/chart.js"></script>
    <script>

        let currentIndex = 0;
        var Id = '';
        var FromDate = '';
        var ToDate = '';
        var Name = '';

        window.onload = function () {
            debugger;
            Id = '@Html.Raw(Id)';
            currentIndex = Id;
            GetMetersIds(Id);
            var interval = document.getElementById('interval').value;
            LoadGraphData(Id, '', '', Name, interval);
        }

        let meterIds = null;
        let meterNames = null;

        function GetMetersIds(mtrId) {
            debugger;
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetMetersIds", "Graph")',
                data: { meterId: mtrId },
                success: function (response) {
                    if (response) {
                        var data = response;
                        meterNames = data.map(item => item.Item1);
                        meterIds = data.map(item => item.Item2);
                        //alert(meterIds + ',' + meterNames);
                    }
                    else {
                        alert('No Content : ' + response);
                    }
                },
                error: function (err) {
                    alert('Error : ' + err);
                }

            });
        }


        // function nextMeter() {
        //     var fromD = document.getElementById('Fdate').value;
        //     var toD = document.getElementById('Tdate').value;
        //     currentIndex = (currentIndex + 1) % meterIds.length;


        //     LoadGraphData(meterIds[currentIndex], fromD, toD, "");
        //     document.getElementById('ttlHeading').textContent = meterNames[meterIds.indexOf(currentIndex)];
        // }

        // function previousMeter() {
        //     var fromD = document.getElementById('Fdate').value;
        //     var toD = document.getElementById('Tdate').value;
        //     currentIndex = (currentIndex - 1 + meterIds.length) % meterIds.length;

        //     LoadGraphData(meterIds[currentIndex], fromD, toD, "");
        //     document.getElementById('ttlHeading').textContent = meterNames[meterIds.indexOf(currentIndex)];
        // }

        // document.getElementById('btnNext').addEventListener('click', nextMeter);
        // document.getElementById('btnPrev').addEventListener('click', previousMeter);



        // <All data get>


        // function LoadGraphData(Id, FromDate, ToDate, Name, Intval) {
        //     $.ajax({
        //         type: 'POST',
        //         url: '@Url.Action("GetOverallGraphData", "Graph")',
        //         data: { groupId: Id, strFD: FromDate, strTD: ToDate, groupName: Name, Interval: Intval },
        //         success: function (response) {
        //             debugger;
        //             if (response) {
        //                 let labels = response.syncdatetime;
        //                 maxDemandData = response.maxDemand.map(x => parseFloat(x));
        //                 powerFactorData = response.powerFactor.map(x => parseFloat(x));
        //                 activeEnergyData = response.activeEnergy.map(x => parseFloat(x));

        //                 myLineChart.data.labels = labels;
        //                 myLineChart.data.datasets[0].data = maxDemandData;
        //                 myLineChart.data.datasets[1].data = powerFactorData;
        //                 myLineChart.data.datasets[2].data = activeEnergyData;
        //                 let sum = activeEnergyData.reduce((accumulator, currentValue) => {
        //                     return accumulator + currentValue;
        //                 }, 0);

        //                 let inputField = document.getElementById('txtConsumption');
        //                 inputField.value = sum.toFixed(2);

        //                 myLineChart.update();
        //             } else {
        //                 alert('No data found');
        //             }
        //         },
        //         error: function (err) {
        //             alert('Error : ' + err);
        //         }
        //     });
        // }

        function LoadGraphData(Id, FromDate, ToDate, Name, Intval) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetOverallGraphData", "Graph")',
                data: { groupId: Id, strFD: FromDate, strTD: ToDate, groupName: Name, Interval: Intval },
                success: function (response) {
                    debugger;
                    if (response) {
                        let labels = response.syncdatetime;
                        let maxDemandData = response.maxDemand.map(x => parseFloat(x));
                        let powerFactorData = response.powerFactor.map(x => parseFloat(x));
                        let activeEnergyData = response.activeEnergy.map(x => parseFloat(x));

                        // Display only the last 30 data points
                        let last30Labels = labels.slice(-30);
                        let last30MaxDemandData = maxDemandData.slice(-30);
                        let last30PowerFactorData = powerFactorData.slice(-30);
                        let last30ActiveEnergyData = activeEnergyData.slice(-30);

                        myLineChart.data.labels = last30Labels;
                        myLineChart.data.datasets[0].data = last30MaxDemandData;
                        myLineChart.data.datasets[1].data = last30PowerFactorData;
                        myLineChart.data.datasets[2].data = last30ActiveEnergyData;

                        // Calculate and display the sum of the last 30 active energy values
                        let sum = activeEnergyData.reduce((accumulator, currentValue) => {
                            return accumulator + currentValue;
                        }, 0);

                        let inputField = document.getElementById('txtConsumption');
                        inputField.value = sum.toFixed(2);

                        myLineChart.update();
                    } else {
                        alert('No data found');
                    }
                },
                error: function (err) {
                    alert('Error : ' + err);
                }
            });
        }


        function viewGraphBtn_Clicked() {
            debugger;
            var fromD = document.getElementById('Fdate').value;
            var toD = document.getElementById('Tdate').value;
            var interval = document.getElementById('interval').value;
            var MId = "@Html.Raw(Id)";
            if (fromD != "" && toD != "" && MId != "") {
                LoadGraphData(MId, fromD, toD, "", interval);
            } else {
                alert('Please Check the Date Selection & Meter Selection.');
            }
        }

        function viewDataBtn_Clicked() {
            debugger;
            var fromD = document.getElementById('Fdate').value == null ? "" : document.getElementById('Fdate').value;
            var toD = document.getElementById('Tdate').value == null ? "" : document.getElementById('Tdate').value;
            var MId = "@Html.Raw(Id)";
            var gname = "@Html.Raw(GName)";
            window.location.href = `@Url.Action("TableSwap", "Graph")?id=${MId}&fd=${fromD}&td=${toD}&strGName=${gname}`;
        }



        function generateTimeline(startTime, endTime, increment) {
            const timeline = [];
            let currentTime = new Date(startTime);

            while (currentTime <= endTime) {
                let hours = currentTime.getHours().toString().padStart(2, '0');
                let minutes = currentTime.getMinutes().toString().padStart(2, '0');
                timeline.push(`${hours}:${minutes}`);
                currentTime.setMinutes(currentTime.getMinutes() + increment);
            }

            return timeline;
        }

        let maxDemandData = [];
        let powerFactorData = [];
        let activeEnergyData = [];

        let ctx = document.getElementById('myLineChart').getContext('2d');
        let targetLineValue = document.getElementById('targetValue').value;

        function drawHorizontalLine(chartInstance, value, color) {
            const yScale = chartInstance.scales.y;
            const yPos = yScale.getPixelForValue(value);

            chartInstance.ctx.save();
            chartInstance.ctx.beginPath();
            chartInstance.ctx.moveTo(chartInstance.chartArea.left, yPos);
            chartInstance.ctx.lineTo(chartInstance.chartArea.right, yPos);
            chartInstance.ctx.strokeStyle = color;
            chartInstance.ctx.lineWidth = 1;
            chartInstance.ctx.shadowColor = color;
            chartInstance.ctx.shadowBlur = 10;
            chartInstance.ctx.stroke();
            chartInstance.ctx.restore();
        }

        let myLineChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [
                    {
                        label: 'MD(kVA)',
                        data: [],
                        borderColor: 'blue',
                        borderWidth: 2,
                        fill: false,
                    },
                    {
                        label: 'PF(Pf)',
                        data: [],
                        borderColor: 'red',
                        borderWidth: 2,
                        fill: false,
                    },
                    {
                        label: 'AED(KWh)',
                        data: [],
                        borderColor: 'green',
                        borderWidth: 2,
                        fill: true,
                    }
                ]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'TIMING',
                            font: {
                                size: 20,
                                weight: 'bold',
                                family: 'Arial'
                            },
                            color: 'darkblue'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'UNITS',
                            font: {
                                size: 20,
                                weight: 'bold',
                                family: 'Arial'
                            },
                            color: 'darkblue'
                        },
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'top',
                        labels: {
                            boxWidth: 20,
                            padding: 15,
                            font: {
                                size: 14,
                                family: 'Arial'
                            },
                            color: 'black'
                        }
                    },
                    annotation: {
                        annotations: {
                            line1: {
                                type: 'line',
                                yMin: targetLineValue,
                                yMax: targetLineValue,
                                borderColor: 'red',
                                borderWidth: 2,
                                label: {
                                    content: 'Target',
                                    enabled: true,
                                    position: 'end'
                                }
                            }
                        }
                    }
                }
            },
            plugins: [{
                id: 'targetLine',
                afterDraw: (chart) => {
                    drawHorizontalLine(chart, targetLineValue, '#1ecbe1');
                }
            }]
        });

        function updateTargetLine() {
            targetLineValue = document.getElementById('targetValue').value;
            myLineChart.update();
        }

        //For Toggle Menu Icons Hide Only
        function toggleControls1() {
            const controls = document.querySelector('.controls');
            controls.style.display = "none";
        }

        //For Toggle Menu Icons Both Open and Hide
        function toggleControls() {
            const controls = document.querySelector('.controls');
            if (controls.style.display === "none" || controls.style.display === "") {
                controls.style.display = "flex";
            } else {
                controls.style.display = "none";
            }
        }

    </script>
}