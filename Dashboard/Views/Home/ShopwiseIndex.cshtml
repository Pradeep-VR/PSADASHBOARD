@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewBag.Title = "METERS";
    var groupId = ViewBag.GroupId;
    var groupName = ViewBag.groupName;
    var yesCon = ViewBag.YesCon;
    var toCon = ViewBag.ToCon;
    ViewBag.Heading = groupName;
}


<link href="~/css/homeshopwiseindex.css" rel="stylesheet" />
<link href="~/css/loader.css" rel="stylesheet" />
<div id="preloader">
    <div class="waviy">
        <span style="--i:1">L</span>
        <span style="--i:2">O</span>
        <span style="--i:3">A</span>
        <span style="--i:4">D</span>
        <span style="--i:5">I</span>
        <span style="--i:6">N</span>
        <span style="--i:7">G</span>
        <span style="--i:8">.</span>
        <span style="--i:9">.</span>
        <span style="--i:10">.</span>
    </div>
</div>



<div class="dashboard" id="groupContainers">

    <div class="left-section" id="divMeters"></div>
    <div class="right-section">

        <div style="display: flex; flex-direction: row; border: 3px solid black;
    padding: 15px; ">


            <select class="form-select" id="ddlDivision" onchange="OnSelectChanged()" style="margin:5px;width:150px">
                <option value="'V','F'">OVERALL</option>
                <option value="'F'">FIXED</option>
                <option value="'V'">VARIABLE</option>
            </select>
            <select class="form-select" id="ddlTimes" onchange="OnSelectChanged()" style=" margin:5px;width:150px">
                <option value="LIVE">LIVE</option>
                <option value="7">WEEKLY</option>
                <option value="30">MONTHLY</option>
            </select>
            <div style="margin:5px">
                <label style="vertical-align:central;color:#4CAF50;font-weight: 600;" for="fname">Consumption :</label><br />
                <input style="vertical-align: central;" type="text" id="txtConsumption" disabled="disabled" name="Consumption" />
            </div>


            <div style="margin:5px">
                <label style="vertical-align:central;color:#4CAF50;font-weight: 600;" for="fname">Set Target :</label><br />
                <input style="vertical-align: central;" type="number" id="txtTarget" value="50" onchange="updateTargetLine()" onkeypress="this.onchange()" />
            </div>
            <div style="display: flex; flex-direction: column; justify-content: space-around;">
                <a style="font-size:20px;color:#3066d1;font-weight: 600;padding-left: 40px;">
                    YESTERDAY CONSUMPTION: <span style="color:red;">@Html.Raw(yesCon)</span> kwh
                </a>
                <a style="font-size:20px;color:#30d1c1;font-weight: 600;padding-left: 40px;">
                    TODAY CONSUMPTION: <span style="color:red;">@Html.Raw(toCon)</span> kwh
                </a>
            </div>

        </div>
        <div class="chart-container">
            <div class="chart-wrapper">
                <canvas id="myLineChart" style="border: 3px solid black;margin-top: 10px;"></canvas>

            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/jquery/jquery.min.js"></script>
    <script src="~/lib/bootstrap/bootstrap.bundle.min.js"></script>
    <script src="~/lib/echarts/echarts.min.js"></script>
    <script src="~/lib/bootstrap/bootstrap.min.js"></script>
    <script src="~/js/linechart.js"></script>
    <script src="~/js/chart.js"></script>
    <script>
        var preloader = document.getElementById('preloader');
        $(document).ready(function () {
            var groupId = '@Html.Raw(groupId)';
            var divs = "'V','F'";
            var data = document.getElementById('ddlDivision');
            var selectedOption = data.options[data.selectedIndex];
            var Divisionvalue = selectedOption.value;

            var data1 = document.getElementById('ddlTimes');
            var selectedOption1 = data1.options[data1.selectedIndex];
            var Timingsvalue = selectedOption1.value;
            onLoadScreen(groupId, Divisionvalue, Timingsvalue);
        });

        function onLoadScreen(JstrGroupid, JMetrDiv, JMetrTimes) {
            preloader.style.display = 'inline-flex';
            LoadGroupData(JstrGroupid, JMetrDiv);
            LoadGraphData(JstrGroupid, JMetrTimes, JMetrDiv);
            Getmetersforddl(JstrGroupid);
            setTimeout(function () {
                preloader.style.display = 'none';
            }, 3000);
        }

        function LoadGroupData(Id, jstrMeterDiv) {
            var groupName = '@Html.Raw(groupName)';

            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetMeters", "Home")',
                data: { groupId: Id, strMeterDiv: jstrMeterDiv },
                success: function (group) {
                    console.log(group);
                    var meters = $('#divMeters');
                    meters.empty();
                    if (group && group.mmaster) {
                        group.mmaster.forEach((meter, index) => {
                            var meterHtml = `
                                                                                <div class="containerMeter">
                                                                                    <div class="meterheading" onclick="navigateGraph('${meter.meterid}', '${meter.metername}', '${groupName}')">
                                                                                        <div class="meter">
                                                                                                    <h1 class="text">${meter.metername}</h1>
                                                                                        </div>
                                                                                    </div>
                                                                                    <div class="card1">
                                                                                                <p style="color:#3066d1;font-weight: 500;">YESTERDAY: <span id="yesterday_${meter.meterid}"></span> kwh</p>
                                                                                                        <p style="color:#088395;font-weight: 500;">TODAY: <span id="today_${meter.meterid}"></span> kwh</p>
                                                                                    </div>
                                                                                    <div class="card">
                                                                                        <div class="row1">
                                                                                            <div class="column">
                                                                                                <h2>Current (A)</h2>
                                                                                                <p>RY: <span id="currentA_${meter.meterid}"></span></p>
                                                                                                <p>YB: <span id="currentB_${meter.meterid}"></span></p>
                                                                                                <p>BR: <span id="currentC_${meter.meterid}"></span></p>
                                                                                            </div>
                                                                                            <div class="column">
                                                                                                <h2>Voltage (V)</h2>
                                                                                                <p>RY: <span id="voltageA_${meter.meterid}"></span></p>
                                                                                                <p>YB: <span id="voltageB_${meter.meterid}"></span></p>
                                                                                                <p>BR: <span id="voltageC_${meter.meterid}"></span></p>
                                                                                            </div>
                                                                                        </div>
                                                                                        <p>kwh: <span id="kwh_${meter.meterid}"></span></p>
                                                                                    </div>
                                                                                </div>
                                                                            `;
                            meters.append(meterHtml);
                            LoadMeterData(meter.meterid);
                        });
                    } else {
                        console.error("Expected a group with an MMASTER array but received: ", group);
                    }
                },
                error: function (err) {
                    console.log(err);
                }
            });
        }

        function LoadMeterData(meterId) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetEnergyDataUsingMeterid", "Home")',
                data: { meterId: meterId },
                success: function (resultData) {
                    document.getElementById(`today_${meterId}`).innerText = resultData.todayConsume;
                    document.getElementById(`yesterday_${meterId}`).innerText = resultData.yeasterdayConsume;
                    document.getElementById(`currentA_${meterId}`).innerText = resultData.currenta;
                    document.getElementById(`currentB_${meterId}`).innerText = resultData.currentb;
                    document.getElementById(`currentC_${meterId}`).innerText = resultData.currentc;
                    document.getElementById(`voltageA_${meterId}`).innerText = resultData.voltageab;
                    document.getElementById(`voltageB_${meterId}`).innerText = resultData.voltagebc;
                    document.getElementById(`voltageC_${meterId}`).innerText = resultData.voltageca;
                    document.getElementById(`kwh_${meterId}`).innerText = resultData.activeenergydelivered;
                },
                error: function (err) {
                    console.log(err);
                }
            });
        }

        function Getmetersforddl(groupId) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetMetersName", "Home")',
                data: { Groupid: groupId },
                success: function (getmetersname) {
                    for (var i = 0; i < getmetersname.mmaster.length; i++) {
                        var meter = getmetersname.mmaster[i];
                        var html = '<label style="color:black; padding-left:10px;font-size: 15px;">'
                            + '<input type="checkbox" name="Meteridentify" style="height:10px;"  value=' + meter.meterid + ' /> &nbsp;&nbsp;' + meter.metername + ''
                            + '</label><br/>';
                        $('#ddlmetersname').append(html);
                    }
                },
                error: function (err) {
                    console.log(err);
                }
            });

        }

        function OnSelectChanged() {

            var data = document.getElementById('ddlDivision');
            var selectedOption = data.options[data.selectedIndex];
            var Divisionvalue = selectedOption.value;

            var data1 = document.getElementById('ddlTimes');
            var selectedOption1 = data1.options[data1.selectedIndex];
            var Timingsvalue = selectedOption1.value;

            var groupId = '@Html.Raw(groupId)';
            onLoadScreen(groupId, Divisionvalue, Timingsvalue);
        }

        //  New 1
        function navigateGraph(Id, Name, gName) {
            window.location.href = `@Url.Action("Index", "Graph")?strId=${Id}&strName=${Name}&strGName=${gName}`;
        }

        function TotCon_BtnClicked() {
            var ids = "@Html.Raw(groupId)";
            window.location.href = `@Url.Action("TotalIndex", "Total")?id=${ids}`;
        }


        // View Graph Button Function
        function btnGraph() {
            var meternames = [];
            $("input:checkbox[name=Meteridentify]:checked").each(function () {
                meternames.push($(this).val());
            });
            var fDate = document.getElementById('Fdate').value;
            var tDate = document.getElementById('Tdate').value;
            if (fDate == "" && tDate == "" && meternames.length == 0) {
                alert("Please select the Meters.....!");
            } else {
                var meterParams = meternames.map(function (name) {
                    return `${name}`;
                });

                window.location.href = `@Url.Action("LstGraphIndex", "Graph")?strId=${meterParams}&strName=${meterParams[0]}&strFdate=${fDate}&strTdate=${tDate}`;
            }
        };

        //View Table Data Button Function
        $("#viewDataBtn").click(function () {
            var fDate = document.getElementById('Fdate').value;
            var tDate = document.getElementById('Tdate').value;
            var groupId = '@Html.Raw(groupId)';
            var groupname = '@Html.Raw(groupName)';
            if (fDate !== "" && tDate !== "" && groupId !== "" && groupname !== "") {
                window.location.href = `@Url.Action("TableData", "Home")?strgroupId=${groupId}&strgroupName=${groupname}&strfromDate=${fDate}&strtoDate=${tDate}`;
            } else {
                alert('Please Check Date Selection.');
            }
        });

        //Export Excel Button Function
        $("#exportXLBtn").click(function () {
            var fDate = document.getElementById('Fdate').value;
            var tDate = document.getElementById('Tdate').value;
            var groupId = '@Html.Raw(groupId)';
            var groupname = '@Html.Raw(groupName)';
            if (fDate !== "" && tDate !== "" && groupId !== "" && groupname !== "") {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetXLData", "Home")',
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ strGroupId: groupId, strFromDate: fDate, strToDate: tDate }),
                    xhrFields: {
                        responseType: 'blob' // Important for binary data download
                    },
                    success: function (data, status, xhr) {
                        var blob = new Blob([data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
                        var link = document.createElement('a');
                        var d = '@DateTime.Now.ToString("dd/mm/yy hh:mm:ss")';
                        link.href = window.URL.createObjectURL(blob);
                        link.download = groupname + ' ENERGYDATA ' + d + '.xlsx';
                        link.click();
                    },
                    error: function (err) {
                        alert('Error : ' + err);
                    }
                });
            } else {
                alert('Please Check Date Selection.');
            }
        });



        let maxDemandData = [];
        let powerFactorData = [];
        let activeEnergyData = [];
        let unitsName = "DAYS";

        let ctx = document.getElementById('myLineChart').getContext('2d');
        let targetLineValue = document.getElementById('txtTarget').value;

        let myLineChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [
                    {
                        label: 'AED(KWh)',
                        data: [],
                        borderColor: 'green',
                        borderWidth: 2,
                        fill: true,
                    }
                ]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'DAYS',
                            font: {
                                size: 20,
                                weight: 'bold',
                                family: 'Arial'
                            },
                            color: 'darkblue'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'UNITS',
                            font: {
                                size: 20,
                                weight: 'bold',
                                family: 'Arial'
                            },
                            color: 'darkblue'
                        },
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'top',
                        labels: {
                            boxWidth: 20,
                            padding: 15,
                            font: {
                                size: 14,
                                family: 'Arial'
                            },
                            color: 'black'
                        }
                    },
                    annotation: {
                        annotations: {
                            line1: {
                                type: 'line',
                                yMin: targetLineValue,
                                yMax: targetLineValue,
                                borderColor: 'red',
                                borderWidth: 2,
                                label: {
                                    content: 'Target',
                                    enabled: true,
                                    position: 'end'
                                }
                            }
                        }
                    }
                }
            },
            plugins: [{
                id: 'targetLine',
                afterDraw: (chart) => {
                    drawHorizontalLine(chart, targetLineValue, '#1ecbe1');
                }
            }]
        });

        function LoadGraphData(Id, Intval, divss) {
            if (Intval == 'LIVE') {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetShopWise_Group_GraphAll", "Graph")',
                    data: { groupId: Id, strFD: '', strTD: '', Interval: Intval, Divison: divss },
                    success: function (response) {
                        if (response) {
                            unitsName = 'TIMING';
                            let labels = response.syncdatetime;
                            if (Array.isArray(labels) && labels.length > 0) {
                                let activeEnergyData = response.consumptions.map(x => parseFloat(x));

                                // Display only the last 30 data points
                                let last30Labels = labels.slice(-30);

                                let last30ActiveEnergyData = activeEnergyData.slice(-30);

                                myLineChart.data.labels = last30Labels;
                                myLineChart.data.datasets[0].data = last30ActiveEnergyData;

                                let sum = activeEnergyData.reduce((accumulator, currentValue) => {
                                    return accumulator + currentValue;
                                }, 0);

                                let inputField = document.getElementById('txtConsumption');
                                inputField.value = sum.toFixed(2);

                                myLineChart.update();
                            } else {
                                alert('No valid labels data found');
                            }
                        } else {
                            alert('No data found');
                        }
                    },
                    error: function (err) {
                        alert('Error : ' + err);
                    }
                });
            } else {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetGroupGraph", "Graph")',
                    data: { groupId: Id, Interval: Intval, Divs: divss },
                    success: function (response) {
                        if (response) {
                            unitsName = 'DAYS';
                            let labels = response.days;
                            if (Array.isArray(labels) && labels.length > 0) {
                                let activeEnergyData = response.consumption.map(x => parseFloat(x));

                                myLineChart.data.labels = labels;
                                myLineChart.data.datasets[0].data = activeEnergyData;

                                let sum = activeEnergyData.reduce((accumulator, currentValue) => {
                                    return accumulator + currentValue;
                                }, 0);

                                let inputField = document.getElementById('txtConsumption');
                                inputField.value = sum.toFixed(2);

                                myLineChart.update();
                            } else {
                                alert('No valid labels data found');
                            }
                        } else {
                            alert('No data found');
                        }
                    },
                    error: function (err) {
                        alert('Error : ' + err);
                    }
                });
            }

        }

        

        function updateTargetLine() {
            targetLineValue = document.getElementById('txtTarget').value;
            myLineChart.update();
        }

        function drawHorizontalLine(chartInstance, value, color) {
            const yScale = chartInstance.scales.y;
            const yPos = yScale.getPixelForValue(value);

            chartInstance.ctx.save();
            chartInstance.ctx.beginPath();
            chartInstance.ctx.moveTo(chartInstance.chartArea.left, yPos);
            chartInstance.ctx.lineTo(chartInstance.chartArea.right, yPos);
            chartInstance.ctx.strokeStyle = color;
            chartInstance.ctx.lineWidth = 1;
            chartInstance.ctx.shadowColor = color;
            chartInstance.ctx.shadowBlur = 10;
            chartInstance.ctx.stroke();
            chartInstance.ctx.restore();
        }


    </script>
}