@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewBag.Title = "METERS";
    var groupId = ViewBag.GroupId;
    var groupName = ViewBag.groupName;
    var yesCon = ViewBag.YesCon;
    var toCon = ViewBag.ToCon;
    ViewBag.Heading = groupName;
}


<link href="~/css/homeshopwiseindex.css" rel="stylesheet" />
<!------------------------------------------------------------------------------------- Ajesh modify 5-12-2024 START -------------------------------------------------------------------->

<style>

    /* Button container to align buttons */
    .button-container {
        display: flex;
        /*   gap: 500px; */
        justify-content: space-evenly;
        align-items: center;
        position: relative;
        margin-top: 10px;
    }

    /* General button styling */
    .styled-btn {
        display: flex;
        align-items: center;
        justify-content: space-between;
        background-color: transparent;
        border: none;
        border-radius: 50px;
        font-family: Arial, sans-serif;
        font-size: 18px;
        font-weight: bold;
        color: white;
        cursor: pointer;
        position: relative;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }
    /* Specific styles for Previous and Next buttons */
    .prev {
        background-color: #f4a900; /* Orange color */
    }

    .next {
        background-color: #00b167; /* Green color */
    }

    /* Icon styles */
    .icon {
        display: flex;
        justify-content: center;
        align-items: center;
        background: white;
        color: black;
        border-radius: 50%;
        width: 36px;
        height: 36px;
        font-size: 16px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        margin: auto;
    }

    /* Hover effects */
    .styled-btn:hover {
        transform: scale(1.05);
        box-shadow: 0 6px 10px rgba(0, 0, 0, 0.2);
    }

        .styled-btn:hover .icon {
            background-color: #ffffff;
        }

    /* Text spacing for buttons */
    .texts {
        font-size: 1vw;
        margin: 0 10px;
        /* color:white; */
    }

    .export-btn {
        background-color: #4CAF50; /* Green background */
        border: none; /* Remove border */
        color: white; /* Text color */
        padding: 5px 5px; /* Padding inside the button */
        text-align: center; /* Center-align text */
        text-decoration: none; /* Remove underline */
        display: inline-block; /* Inline block for button */
        font-size: 16px; /* Font size */
        margin: 10px 0; /* Margin for spacing */
        cursor: pointer; /* Pointer cursor on hover */
        border-radius: 8px; /* Rounded corners */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow */
        transition: all 0.3s ease; /* Smooth transition for effects */
    }

        /* Hover effect */
        .export-btn:hover {
            background-color: #45a049; /* Darker green on hover */
            transform: translateY(-3px); /* Slight upward movement */
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3); /* Darker shadow on hover */
        }

        /* Active state (when clicked) */
        .export-btn:active {
            background-color: #388e3c; /* Even darker green when pressed */
            transform: translateY(1px); /* Slight downward movement */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2); /* Subtle shadow on active state */
        }

        /* Focus state (when tabbed into) */
        .export-btn:focus {
            outline: none; /* Remove default outline */
            border: 2px solid #4CAF50; /* Green border on focus */
            box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.5); /* Glowing green focus */
        }

    .heading {
        display: flex;
        justify-content: space-between; /* Space between text and image */
        align-items: center; /* Vertically align the content */
    }

        .heading span {
            margin-left: 10px; /* Adds space between text and the image */
        }

    .export-btn {
        width: 30px; /* Adjust width as necessary */
        height: 30px; /* Adjust height as necessary */
        cursor: pointer; /* Optional: for a better user experience */
    }

    .button-container {
        display: flex;
        justify-content: space-between; /* Align buttons and heading */
        align-items: center;
    }

    #exportOptionsPopup {
        position: fixed;
        /* top: 50%;
                                                                         left: 50%; */
        transform: translate(-50%, -50%);
        background: #fff;
        padding: 0px;
        border: 1px solid #ccc;
        display: none;
        z-index: 1000;
    }

    .popup-content {
        text-align: center;
    }

    button {
        margin: 10px;
        padding: 10px 2 0px;
        font-size: 16px;
    }

    #exportOptionsPopup {
        /*  display: none;
                                                                         position: fixed;
                                                                         z-index: 1000;
                                                                         top: 282px;
                                                                         left: 255px;
                                                                         border: 1px solid #ccc;
                                                                         background: #fff;
                                                                         border-radius: 5px;
                                                                         padding: 10px;
                                                                         box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); */
        background: #44d397c2;
        border-radius: 8px;
        border: 1px solid #b5e7d2c2;
    }

    /* Styling for each option */


    .ex {
        border: 1px solid Gray;
        width: 185px;
        margin-left: 125px;
        margin-top: -15px;
        background-color: LightGray;
    }

    .export-option {
        display: block;
        text-align: center;
        text-decoration: none;
        background-color: #8fd1b54f;
        border-bottom: 1px solid gray;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
        border-radius: 5px;
    }

        .export-option:last-child {
            border-bottom: none;
        }

        .export-option:hover {
            background-color: lightgreen;
            box-shadow: 0 0 4px rgba(0, 255, 0, 0.8);
            transform: scale(1.05);
        }

    .datepicker {
        border: 1px solid black;
        border-radius: 20px;
        background-color: #8fbc8fa1;
        box-shadow: rgba(50, 50, 93, 0.25) 0px 30px 60px -12px inset, rgba(0, 0, 0, 0.3) 0px 18px 36px -18px inset;
    }

    .viewbtn {
        border-radius: 10px;
        width: 70px;
        font-family: auto;
        background-color: #00ff7fad;
        box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;
    }

    #showDataLabelsBtn {
        background: linear-gradient(135deg, #4CAF50, #2E7D32);
        color: white;
        font-size: 16px;
        font-weight: bold;
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }

        #showDataLabelsBtn:hover {
            background: linear-gradient(135deg, #2E7D32, #1B5E20);
            transform: scale(1.05);
            box-shadow: 0 6px 14px rgba(0, 0, 0, 0.25);
        }

        #showDataLabelsBtn:active {
            transform: scale(0.98);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

</style>
<!------------------------------------------------------------------------------------- Ajesh modify 5-12-2024 END -------------------------------------------------------------------->

<div class="dashboard" id="groupContainers">

    <div class="left-section" id="divMeters"></div>
    <div class="right-section">
        <div style="display: flex; flex-direction: row; border: 3px solid black;  padding: 10px; ">
            <div style="margin:5px;">
                <label style="vertical-align:central;color:#222831;font-weight: 600;" for="fname">Division :</label><br />
                <select class="form-select" id="ddlDivision" onchange="OnSelectChanged()" style="width:150px;height:35px;">
                    <option value="'V','F'">OVERALL</option>
                    <option value="'F'">FIXED</option>
                    <option value="'V'">VARIABLE</option>
                </select>
            </div>
            <div style="margin:5px;">
                <label style="vertical-align:central;color:#222831;font-weight: 600;" for="fname">TimeLine :</label>
                <select class="form-select" id="ddlTimes" onchange="OnSelectChanged()" style="width:150px;height:35px">
                    <option value="LIVE">LIVE</option>
                    <option value="7">WEEKLY</option>
                    <option value="30">MONTHLY</option>
                    <option value="CUSTOMIZE">CUSTOMIZE</option>
                </select>
            </div>

            <div style="margin:5px">
                <label style="vertical-align:central;color:#222831;font-weight: 600;" for="fname">Consumption :</label><br />
                <input style="vertical-align: central;height:35px;" type="text" id="txtConsumption" disabled="disabled" name="Consumption" />
            </div>


            <div style="margin:5px">
                <label style="vertical-align:central;color:#222831;font-weight: 600;" for="fname">Set Target :</label><br />
                <input style="vertical-align: central;height:35px;" type="number" id="txtTarget" value="50" onchange="updateTargetLine()" onkeypress="this.onchange()" />
            </div>

            <div style="display: flex; flex-direction: column; justify-content: space-around;">
                <a style="font-size:20px;color:#3066d1;font-weight: 600;padding-left: 40px;">
                    YESTERDAY CONSUMPTION: <span style="color:red;">@Html.Raw(yesCon)</span> kWh
                </a>
                <a style="font-size:20px;color:#016A70;font-weight: 600;padding-left: 40px;">
                    TODAY CONSUMPTION: <span style="color:red;">@Html.Raw(toCon)</span> kWh
                </a>

            </div>

        </div>
        <div class="chart-container">
            <!------------------------------------------------------------------------------------- Ajesh modify 5-12-2024 START -------------------------------------------------------------------->
            <div class="button-container">
                <button class="styled-btn prev">
                    <div class="icon">
                        <svg xmlns="http://www.w3.org/2000/svg" style="color:#f4a900;" viewBox="0 0 24 24" width="25" height="25">
                            <path d="M15 5l-7 7 7 7" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"></path>
                        </svg>
                    </div>
                    <span id="prevButton" onclick="showPreviousData()" class="texts">PREV</span>
                </button>

                @* <span>
                    <img src="~/assets/images/SaveGraph.png" alt="Export as Image" id="screenshotButton" class="export-btn" />                    
                </span> *@

                <!------------------------------------------------------------------------------------- Ajesh modify 14-12-2024 Start -------------------------------------------------------------------->
                <span id="optCustomize" class="datepicker" style="display:none;">
                    <label for="FromDate" style="color:black;font-weight:600;padding:10px;">From Date:</label>
                    <input style="width: 152px;margin-right: 30px;font-family: auto;
    border-radius: 10px;" type="datetime-local" id="Fdate" name="fromdate" />

                    <label for="ToDate" style="color:black;font-weight:600;padding:10px;">To Date:</label>
                    <input style="width: 152px;margin-right: 30px;font-family: auto;
    border-radius: 10px;" type="datetime-local" id="Tdate" name="todate" />

                    <button class="viewbtn" onclick="Btn_Customize_View()">VIEW</button>

                </span>

                <span>
                    <img src="~/assets/images/SaveGraph.png"
                         alt="Export as Image" style="width:30px"
                         id="ssButton"
                         class="export-btn"
                         onclick="toggleExportOptions()" />
                </span>

                <!-- Popup to select export option -->
                <div id="exportOptionsPopup" style="width: 100px;">



                    <div class="export-option" onclick="takeScreenshot()" style="display: flex; align-items: center; gap: 8px; cursor: pointer;" hidePopup()">
                        <img src="~/assets/images/SaveGraph.png"
                             alt="Export as Image" style="width: 27px;padding: 4px;margin-left: 10px;" />
                        <span>Image</span>
                    </div>
                    <div class="export-option" onclick="downloadGraphDataAsTable()" style="display: flex; align-items: center; gap: 8px; cursor: pointer;" hidePopup()">
                        <img src="~/assets/images/excel.png"
                             alt="Export as Image" style="width: 27px;padding: 4px;margin-left: 10px;" />
                        <span>Excel</span>
                    </div>


                </div>

                <!------------------------------------------------------------------------------------- Ajesh modify 14-12-2024 End -------------------------------------------------------------------->
                <button id="showDataLabelsBtn">Show Data Labels</button>
                <button class="styled-btn next">
                    <span id="nextButton" onclick="showNextData()" class="texts">NEXT</span>
                    <div class="icon">
                        <svg xmlns="http://www.w3.org/2000/svg" style="color: #00b167;" viewBox="0 0 24 24" width="25" height="25">
                            <path d="M9 5l7 7-7 7" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"></path>
                        </svg>
                    </div>
                </button>
            </div>
            <!------------------------------------------------------------------------------------- Ajesh modify 5-12-2024 END -------------------------------------------------------------------->
            <div class="col">
                <div class="chart-wrapper">
                    <canvas id="myLineChart" style="border: 3px solid black;margin-top: 10px;"></canvas>
                </div>

            </div>
        </div>
    </div>
</div>

@section Scripts {
    @* <script src="~/lib/jquery/jquery.min.js"></script> *@
    @* <script src="~/lib/bootstrap/bootstrap.bundle.min.js"></script> *@
    @* <script src="~/lib/echarts/echarts.min.js"></script> *@
    @* <script src="~/lib/bootstrap/bootstrap.min.js"></script> *@
    @* <script src="~/js/linechart.js"></script> *@
    @* <script src="~/js/chart.js"></script> *@
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
    <script>

        var preloader = document.getElementById('preloader');
        $(document).ready(function () {
            var groupId = '@Html.Raw(groupId)';
            var divs = "'V','F'";
            var data = document.getElementById('ddlDivision');
            var selectedOption = data.options[data.selectedIndex];
            var Divisionvalue = selectedOption.value;

            var data1 = document.getElementById('ddlTimes');
            var selectedOption1 = data1.options[data1.selectedIndex];
            var Timingsvalue = selectedOption1.value;
            onLoadScreen(groupId, Divisionvalue, Timingsvalue);
        });

        function onLoadScreen(JstrGroupid, JMetrDiv, JMetrTimes) {
            preloader.style.display = 'inline-flex';
            var data = document.getElementById('ddlDivision');

            if(JstrGroupid === "GTW1"){
                data.disabled = true;
            }else{
                data.disabled = false;
            }

            LoadGroupData(JstrGroupid, JMetrDiv);
            LoadGraphData(JstrGroupid, JMetrTimes, JMetrDiv);
            Getmetersforddl(JstrGroupid);

            setTimeout(function () {
                preloader.style.display = 'none';
            }, 3000);
        }

        function LoadGroupData(Id, jstrMeterDiv) {
            var groupName = '@Html.Raw(groupName)';

            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetMeters", "Home")',
                data: { groupId: Id, strMeterDiv: jstrMeterDiv },
                success: function (group) {
                    console.log(group);
                    var meters = $('#divMeters');
                    meters.empty();
                    if (group && group.mmaster) {
                        group.mmaster.forEach((meter, index) => {
                            var meterHtml = `
                                                                                <div class="containerMeter">
                                                                                    <div class="meterheading" onclick="navigateGraph('${meter.meterid}', '${meter.metername}', '${groupName}')">
                                                                                        <div class="meter">
                                                                                                    <h1 class="text">${meter.metername}</h1>
                                                                                        </div>
                                                                                    </div>
                                                                                    <div class="card1">
                                                                                                <p style="color:#3066d1;font-weight: 500;">YESTERDAY: <span id="yesterday_${meter.meterid}"></span> kwh</p>
                                                                                                        <p style="color:#088395;font-weight: 500;">TODAY: <span id="today_${meter.meterid}"></span> kwh</p>
                                                                                    </div>
                                                                                    <div class="card">
                                                                                        <div class="row1">
                                                                                            <div class="column">
                                                                                                <h2>Current (A)</h2>
                                                                                                <p>RY: <span id="currentA_${meter.meterid}"></span></p>
                                                                                                <p>YB: <span id="currentB_${meter.meterid}"></span></p>
                                                                                                <p>BR: <span id="currentC_${meter.meterid}"></span></p>
                                                                                            </div>
                                                                                            <div class="column">
                                                                                                <h2>Voltage (V)</h2>
                                                                                                <p>RY: <span id="voltageA_${meter.meterid}"></span></p>
                                                                                                <p>YB: <span id="voltageB_${meter.meterid}"></span></p>
                                                                                                <p>BR: <span id="voltageC_${meter.meterid}"></span></p>
                                                                                            </div>
                                                                                        </div>
                                                                                        <p>kwh: <span id="kwh_${meter.meterid}"></span></p>
                                                                                    </div>
                                                                                </div>
                                                                            `;
                            meters.append(meterHtml);
                            LoadMeterData(meter.meterid);
                        });
                    } else {
                        console.error("Expected a group with an MMASTER array but received: ", group);
                    }
                },
                error: function (err) {
                    console.log(err);
                }
            });
        }

        function LoadMeterData(meterId) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetEnergyDataUsingMeterid", "Home")',
                data: { meterId: meterId },
                success: function (resultData) {
                    document.getElementById(`today_${meterId}`).innerText = resultData.todayConsume;
                    document.getElementById(`yesterday_${meterId}`).innerText = resultData.yeasterdayConsume;
                    document.getElementById(`currentA_${meterId}`).innerText = resultData.currenta;
                    document.getElementById(`currentB_${meterId}`).innerText = resultData.currentb;
                    document.getElementById(`currentC_${meterId}`).innerText = resultData.currentc;
                    document.getElementById(`voltageA_${meterId}`).innerText = resultData.voltageab;
                    document.getElementById(`voltageB_${meterId}`).innerText = resultData.voltagebc;
                    document.getElementById(`voltageC_${meterId}`).innerText = resultData.voltageca;
                    document.getElementById(`kwh_${meterId}`).innerText = resultData.activeenergydelivered;

                    // Calculate the sum of current and voltage values

                    let voltageA = parseFloat(resultData.voltageab) || 0;
                    let voltageB = parseFloat(resultData.voltagebc) || 0;
                    let voltageC = parseFloat(resultData.voltageca) || 0;

                    let sum = voltageA + voltageB + voltageC;

                    // Get the meter container
                    const meterContainer = document.getElementById(`voltageA_${meterId}`).closest('.containerMeter');

                    // Update the border color based on the sum
                    if (sum === 0) {
                        meterContainer.style.borderColor = 'red';
                        meterContainer.style.boxShadow = '10px 3.5px 5px red';
                    } else {
                        meterContainer.style.borderColor = '#ccc'; // Default border color
                    }


                },
                error: function (err) {
                    console.log(err);
                }
            });
        }


        function Getmetersforddl(groupId) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetMetersName", "Home")',
                data: { Groupid: groupId },
                success: function (getmetersname) {
                    for (var i = 0; i < getmetersname.mmaster.length; i++) {
                        var meter = getmetersname.mmaster[i];
                        var html = '<label style="color:black; padding-left:10px;font-size: 15px;">'
                            + '<input type="checkbox" name="Meteridentify" style="height:10px;"  value=' + meter.meterid + ' /> &nbsp;&nbsp;' + meter.metername + ''
                            + '</label><br/>';
                        $('#ddlmetersname').append(html);
                    }
                },
                error: function (err) {
                    console.log(err);
                }
            });

        }

        function OnSelectChanged() {
            var customize = document.getElementById('optCustomize');

            var data = document.getElementById('ddlDivision');
            var selectedOption = data.options[data.selectedIndex];
            var Divisionvalue = selectedOption.value;

            var data1 = document.getElementById('ddlTimes');
            var selectedOption1 = data1.options[data1.selectedIndex];
            var Timingsvalue = selectedOption1.value;

            var groupId = '@Html.Raw(groupId)';

            if(Timingsvalue === 'CUSTOMIZE'){
                customize.style.display = 'block';
            }else{
                customize.style.display = 'none';
                onLoadScreen(groupId, Divisionvalue, Timingsvalue);
            }

        }

        //  New 1
        function navigateGraph(Id, Name, gName) {
            window.location.href = `@Url.Action("Index", "Graph")?strId=${Id}&strName=${Name}&strGName=${gName}`;
        }

        function TotCon_BtnClicked() {
            var ids = "@Html.Raw(groupId)";
            window.location.href = `@Url.Action("TotalIndex", "Total")?id=${ids}`;
        }


        // View Graph Button Function
        function btnGraph() {
            var meternames = [];
            $("input:checkbox[name=Meteridentify]:checked").each(function () {
                meternames.push($(this).val());
            });
            var fDate = document.getElementById('Fdate').value;
            var tDate = document.getElementById('Tdate').value;
            if (fDate == "" && tDate == "" && meternames.length == 0) {
                alert("Please select the Meters.....!");
            } else {
                var meterParams = meternames.map(function (name) {
                    return `${name}`;
                });

                window.location.href = `@Url.Action("LstGraphIndex", "Graph")?strId=${meterParams}&strName=${meterParams[0]}&strFdate=${fDate}&strTdate=${tDate}`;
            }
        };

        //View Table Data Button Function
        $("#viewDataBtn").click(function () {
            var fDate = document.getElementById('Fdate').value;
            var tDate = document.getElementById('Tdate').value;
            var groupId = '@Html.Raw(groupId)';
            var groupname = '@Html.Raw(groupName)';
            if (fDate !== "" && tDate !== "" && groupId !== "" && groupname !== "") {
                window.location.href = `@Url.Action("TableData", "Home")?strgroupId=${groupId}&strgroupName=${groupname}&strfromDate=${fDate}&strtoDate=${tDate}`;
            } else {
                alert('Please Check Date Selection.');
            }
        });

        //Export Excel Button Function
        $("#exportXLBtn").click(function () {
            var fDate = document.getElementById('Fdate').value;
            var tDate = document.getElementById('Tdate').value;
            var groupId = '@Html.Raw(groupId)';
            var groupname = '@Html.Raw(groupName)';
            if (fDate !== "" && tDate !== "" && groupId !== "" && groupname !== "") {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetXLData", "Home")',
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ strGroupId: groupId, strFromDate: fDate, strToDate: tDate }),
                    xhrFields: {
                        responseType: 'blob' // Important for binary data download
                    },
                    success: function (data, status, xhr) {
                        var blob = new Blob([data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
                        var link = document.createElement('a');
                        var d = '@DateTime.Now.ToString("dd/mm/yy hh:mm:ss")';
                        link.href = window.URL.createObjectURL(blob);
                        link.download = groupname + ' ENERGYDATA ' + d + '.xlsx';
                        link.click();
                    },
                    error: function (err) {
                        alert('Error : ' + err);
                    }
                });
            } else {
                alert('Please Check Date Selection.');
            }
        });



        let maxDemandData = [];
        let powerFactorData = [];
        let activeEnergyData = [];
        let unitsName = "DAYS";

        let ctx = document.getElementById('myLineChart').getContext('2d');
        let targetLineValue = document.getElementById('txtTarget').value;

        let myLineChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [], // Your labels here
                datasets: [
                    {
                        label: 'AED(KWh)',
                        data: [], // Your data here
                        borderColor: 'green',
                        borderWidth: 2,
                        fill: true,
                        pointBackgroundColor: 'green', // Color of the points
                        pointRadius: 5, // Size of the points
                    }
                ]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'DAYS',
                            font: {
                                size: 20,
                                weight: 'bold',
                                family: 'Arial'
                            },
                            color: 'darkblue'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'UNITS',
                            font: {
                                size: 20,
                                weight: 'bold',
                                family: 'Arial'
                            },
                            color: 'darkblue'
                        },
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'top',
                        labels: {
                            boxWidth: 20,
                            padding: 15,
                            font: {
                                size: 14,
                                family: 'Arial'
                            },
                            color: 'black'
                        }
                    },
                    datalabels: {
                        display: false, // Initially hide data labels
                        anchor: 'end',
                        align: 'top',
                        formatter: function (value, context) {
                            return value.toFixed(2); // Format the value to 2 decimal places
                        },
                        font: {
                            weight: 'bold',
                            size: 12
                        },
                        color: 'black'
                    },
                    annotation: {
                        annotations: {
                            line1: {
                                type: 'line',
                                yMin: targetLineValue,
                                yMax: targetLineValue,
                                borderColor: 'red',
                                borderWidth: 2,
                                label: {
                                    content: 'Target',
                                    enabled: true,
                                    position: 'end'
                                }
                            }
                        }
                    }
                }
            },
            plugins: [ChartDataLabels] // Enable the DataLabels plugin
        });

        // Button event listener to toggle data labels visibility
        document.getElementById('showDataLabelsBtn').addEventListener('click', function () {
            let datalabelsVisible = myLineChart.options.plugins.datalabels.display;
            myLineChart.options.plugins.datalabels.display = !datalabelsVisible; // Toggle visibility
            myLineChart.update(); // Update chart
            this.innerText = datalabelsVisible ? 'Show Data Labels' : 'Hide Data Labels'; // Toggle button text
        });



        // let ctx = document.getElementById('myLineChart').getContext('2d');
        // let targetLineValue = document.getElementById('txtTarget').value;

        // let myLineChart = new Chart(ctx, {
        //     type: 'line',
        //     data: {
        //         labels: [],
        //         datasets: [
        //             {
        //                 label: 'AED(KWh)',
        //                 data: [],
        //                 borderColor: 'green',
        //                 borderWidth: 2,
        //                 fill: true,
        //             }
        //         ]
        //     },
        //     options: {
        //         responsive: true,
        //         scales: {
        //             x: {
        //                 title: {
        //                     display: true,
        //                     text: 'DAYS',
        //                     font: {
        //                         size: 20,
        //                         weight: 'bold',
        //                         family: 'Arial'
        //                     },
        //                     color: 'darkblue'
        //                 }
        //             },
        //             y: {
        //                 title: {
        //                     display: true,
        //                     text: 'UNITS',
        //                     font: {
        //                         size: 20,
        //                         weight: 'bold',
        //                         family: 'Arial'
        //                     },
        //                     color: 'darkblue'
        //                 },
        //                 beginAtZero: true
        //             }
        //         },
        //         plugins: {
        //             legend: {
        //                 display: true,
        //                 position: 'top',
        //                 labels: {
        //                     boxWidth: 20,
        //                     padding: 15,
        //                     font: {
        //                         size: 14,
        //                         family: 'Arial'
        //                     },
        //                     color: 'black'
        //                 }
        //             },
        //             annotation: {
        //                 annotations: {
        //                     line1: {
        //                         type: 'line',
        //                         yMin: targetLineValue,
        //                         yMax: targetLineValue,
        //                         borderColor: 'red',
        //                         borderWidth: 2,
        //                         label: {
        //                             content: 'Target',
        //                             enabled: true,
        //                             position: 'end'
        //                         }
        //                     }
        //                 }
        //             }
        //         }
        //     },
        //     plugins: [{
        //         id: 'targetLine',
        //         afterDraw: (chart) => {
        //             drawHorizontalLine(chart, targetLineValue, '#1ecbe1');
        //         }
        //     }]
        // });

        //----------------------------------------------------------------------------------- Ajesh modify 5-12-2024 START//------------------------------------------------------------------------------------------------------------
               let currentStartIndex = 0; // Start of the current data range
               const dataChunkSize = 32; // Number of points per view
               let totalData = []; // Will hold all the data fetched for the graph
               //----------------------------------------------------------------------------------- Ajesh modify 5-12-2024 END//------------------------------------------------------------------------------------------------------------

        function LoadGraphData(Id, Intval, divss) {
            if (Intval == 'LIVE') {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetShopWise_Group_GraphAll", "Graph")',
                    data: { groupId: Id, strFD: '', strTD: '', Interval: Intval, Divison: divss },
                    success: function (response) {
                        if (response) {
                            unitsName = 'TIMING';
                            let labels = response.syncdatetime;
                            if (Array.isArray(labels) && labels.length > 0) {
                                let activeEnergyData = response.consumptions.map(x => parseFloat(x));
                                //----------------------------------------------------------------------------------- Ajesh modify 5-12-2024 START//------------------------------------------------------------------------------------------------------------
                                       totalData = labels.map((x, i) => ({
                                           label: x,
                                           activeEnergy: activeEnergyData[i]
                                       }));

                                       // Set currentStartIndex to the last 32 data points
                                       currentStartIndex = Math.max(totalData.length - dataChunkSize, 0);

                                       // Calculate and display the sum of the active energy values
                                       let sum = activeEnergyData.reduce((accumulator, currentValue) => accumulator + currentValue, 0);
                                       let inputField = document.getElementById('txtConsumption');
                                       inputField.value = sum.toFixed(2);

                                       // Display the last 32 data points by default
                                       updateGraph();
                                       updateNavigationButtons();
                                       //----------------------------------------------------------------------------------- Ajesh modify 5-12-2024 END//------------------------------------------------------------------------------------------------------------
                            } else {
                                alert('No valid labels data found');
                            }
                        } else {
                            alert('No data found');
                        }
                    },
                    error: function (err) {
                        alert('Error : ' + err);
                    }
                });
            } else {
                if(Intval != 'CUSTOMIZE'){
                    $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetGroupGraph", "Graph")',
                    data: { groupId: Id, Interval: Intval, Divs: divss },
                    success: function (response) {
                        if (response) {
                            unitsName = 'DAYS';
                            let labels = response.days;
                            if (Array.isArray(labels) && labels.length > 0) {
                                let activeEnergyData = response.consumption.map(x => parseFloat(x));
                                //----------------------------------------------------------------------------------- Ajesh modify 5-12-2024 START//------------------------------------------------------------------------------------------------------------

                                totalData = labels.map((x, i) => ({
                                           label: x,
                                           activeEnergy: activeEnergyData[i]
                                       }));

                                       // Set currentStartIndex to the last 32 data points
                                       currentStartIndex = Math.max(totalData.length - dataChunkSize, 0);

                                       // Calculate and display the sum of the active energy values
                                       let sum = activeEnergyData.reduce((accumulator, currentValue) => accumulator + currentValue, 0);
                                       let inputField = document.getElementById('txtConsumption');
                                       inputField.value = sum.toFixed(2);

                                       // Display the last 32 data points by default
                                       updateGraph();
                                       updateNavigationButtons();
                                       //----------------------------------------------------------------------------------- Ajesh modify 5-12-2024 END//------------------------------------------------------------------------------------------------------------

                            } else {
                                alert('No valid labels data found');
                            }
                        } else {
                            alert('No data found');
                        }
                    },
                    error: function (err) {
                        alert('Error : ' + err);
                    }
                });
                }
            }

        }

        function Btn_Customize_View() {
            // alert("Date changed...");

            var data = document.getElementById('ddlDivision');
            var selectedOption = data.options[data.selectedIndex];
            var Divisionvalue = selectedOption.value;

            var data1 = document.getElementById('ddlTimes');
            var selectedOption1 = data1.options[data1.selectedIndex];
            var Timingsvalue = selectedOption1.value;

            var groupid = '@Html.Raw(groupId)';

            var fDate = document.getElementById('Fdate').value;
            var tDate = document.getElementById('Tdate').value;

            debugger;

            $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetShopWise_Group_GraphAll", "Graph")',
                    data: { groupId: groupid, strFD: fDate, strTD: tDate, Interval: Timingsvalue, Divison: Divisionvalue },
                    success: function (response) {
                        if (response) {
                            unitsName = 'TIMING';
                            let labels = response.syncdatetime;
                            if (Array.isArray(labels) && labels.length > 0) {
                                let activeEnergyData = response.consumptions.map(x => parseFloat(x));
                                //----------------------------------------------------------------------------------- Ajesh modify 5-12-2024 START//------------------------------------------------------------------------------------------------------------
                                       totalData = labels.map((x, i) => ({
                                           label: x,
                                           activeEnergy: activeEnergyData[i]
                                       }));

                                       // Set currentStartIndex to the last 32 data points
                                       currentStartIndex = Math.max(totalData.length - dataChunkSize, 0);

                                       // Calculate and display the sum of the active energy values
                                       let sum = activeEnergyData.reduce((accumulator, currentValue) => accumulator + currentValue, 0);
                                       let inputField = document.getElementById('txtConsumption');
                                       inputField.value = sum.toFixed(2);

                                       // Display the last 32 data points by default
                                       updateGraph();
                                       updateNavigationButtons();
                                       //----------------------------------------------------------------------------------- Ajesh modify 5-12-2024 END//------------------------------------------------------------------------------------------------------------
                            } else {
                                alert('No valid labels data found');
                            }
                        } else {
                            alert('No data found');
                        }
                    },
                    error: function (err) {
                        alert('Error : ' + err);
                    }
                });
        }

        //----------------------------------------------------------------------------------- Ajesh modify 5-12-2024 START//------------------------------------------------------------------------------------------------------------


               function showPreviousData() {
                   if (currentStartIndex > 0) {
                       currentStartIndex = Math.max(currentStartIndex - dataChunkSize, 0);
                       updateGraph();
                       updateNavigationButtons();
                   }
               }

               function showNextData() {
                   if (currentStartIndex + dataChunkSize < totalData.length) {
                       currentStartIndex = Math.min(currentStartIndex + dataChunkSize, totalData.length - dataChunkSize);
                       updateGraph();
                       updateNavigationButtons();
                   }
               }

               function updateGraph() {
                   const endIndex = Math.min(currentStartIndex + dataChunkSize, totalData.length);
                   const currentData = totalData.slice(currentStartIndex, endIndex);

                   // Map the data points to display the actual label (e.g., timestamp or another meaningful label)
                   const currentLabels = currentData.map((item) => item.label); // Using item.label from the data

                   // Update the chart data
                   myLineChart.data.labels = currentLabels;  // Use meaningful labels (like timestamps) for x-axis
                   myLineChart.data.datasets[0].data = currentData.map(item => item.activeEnergy);  // activeEnergy values

                   myLineChart.update();  // Redraw the chart with the updated data
               }

               function updateNavigationButtons() {
                   document.getElementById('prevButton').disabled = currentStartIndex === 0;
                   document.getElementById('nextButton').disabled = currentStartIndex + dataChunkSize >= totalData.length;
               }

               //----------------------------------------------------------------------------------- Ajesh modify 5-12-2024 END//------------------------------------------------------------------------------------------------------------


        function updateTargetLine() {
            targetLineValue = document.getElementById('txtTarget').value;
            myLineChart.update();
        }

        function drawHorizontalLine(chartInstance, value, color) {
            const yScale = chartInstance.scales.y;
            const yPos = yScale.getPixelForValue(value);

            chartInstance.ctx.save();
            chartInstance.ctx.beginPath();
            chartInstance.ctx.moveTo(chartInstance.chartArea.left, yPos);
            chartInstance.ctx.lineTo(chartInstance.chartArea.right, yPos);
            chartInstance.ctx.strokeStyle = color;
            chartInstance.ctx.lineWidth = 1;
            chartInstance.ctx.shadowColor = color;
            chartInstance.ctx.shadowBlur = 10;
            chartInstance.ctx.stroke();
            chartInstance.ctx.restore();
        }

                 //----------------------------------------------------------------------------------- Ajesh modify 14-12-2024 START//------------------------------------------------------------------------------------------------------------


        function hidePopup() {
            document.getElementById("exportOptionsPopup").style.display = "none";
        }


        function showExportOptions() {
            // Show the popup with options
            document.getElementById('exportOptionsPopup').style.display = 'block';
        }


        function toggleExportOptions() {
            const popup = document.getElementById("exportOptionsPopup");
            const button = document.getElementById("ssButton");

            // Get button's position for placing the popup
            const rect = button.getBoundingClientRect();

            // Set popup position dynamically near the button
            popup.style.top = `${rect.bottom + window.scrollY}px`;
            popup.style.left = `${rect.left + window.scrollX}px`;

            // Toggle popup visibility
            popup.style.display = popup.style.display === "block" ? "none" : "block";
        }

        // Close popup when clicking outside of it
        document.addEventListener("click", (event) => {
            const popup = document.getElementById("exportOptionsPopup");
            const button = document.getElementById("ssButton");

            if (!popup.contains(event.target) && event.target !== button) {
                popup.style.display = "none";
            }
        });

        // Placeholder function for screenshot logic
        function takeScreenshot() {
            alert("Screenshot logic executed");
        }

        // Placeholder function for CSV download logic
        function downloadGraphDataAsTable() {
            alert("CSV download logic executed");
        }

        function closePopup() {
            // Close the popup when cancel is clicked
            document.getElementById('exportOptionsPopup').style.display = 'none';
        }

        function takeScreenshot() {
            // Logic for taking a screenshot (export as image)
            console.log('Screenshot functionality triggered!');
            // Example of screenshot functionality
            var dt = new Date();
            var time =
                ' ' +
                dt.getDate() +
                '/' +
                (dt.getMonth() + 1) + // Adjusted to display correct month (0-indexed)
                '/' +
                dt.getFullYear() +
                ' ' +
                dt.getHours() +
                ':' +
                dt.getMinutes() +
                ':' +
                dt.getSeconds();

            // Select only the specific div
            var targetDiv = document.querySelector('.col');

            // Pass the target element to html2canvas
            html2canvas(targetDiv).then(function (canvas) {
                const link = document.createElement('a');
                link.download = '@Html.Raw(groupName)' + time + '.png';
                link.href = canvas.toDataURL();
                link.click();
            });

            // Close the popup after action
            closePopup();
        }

        function downloadGraphDataAsTable() {
            if (!totalData || totalData.length === 0) {
                alert('No graph data available for download.');
                return;
            }

            var dt = new Date();
            var time =
                ' ' +
                dt.getDate() +
                '/' +
                (dt.getMonth() + 1) + // Adjusted to display correct month (0-indexed)
                '/' +
                dt.getFullYear() +
                ' ' +
                dt.getHours() +
                ':' +
                dt.getMinutes() +
                ':' +
                dt.getSeconds();
                var names = '@Html.Raw(groupName)'+' ' + time ;
            // Prepare the data for CSV export
            const graphData = [
                ['DateTime', 'Consumption'],  // Headers
                ...totalData.map(item => [item.label, item.activeEnergy])
            ];

            // Convert data to CSV format
            const csvContent = graphData.map(row => row.join(',')).join('\n');

            // Create a blob and trigger download
            const blob = new Blob([csvContent], { type: 'text/csv' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download =  names + '.csv';
            link.click();

            console.log('Graph data downloaded as CSV!');

            // Close the popup after action
            closePopup();
        }

        //----------------------------------------------------------------------------------- Ajesh modify 14-12-2024 END//------------------------------------------------------------------------------------------------------------


    </script>
}