@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewBag.Heading = "OVERALL DATA";
}

<style>
    /* .heading {
                                    border: 1px solid;
                                    background-color: #E3F2FD;
                                    color: dodgerblue;
                                    border-radius: 10px;
                                    font-size: 50px;
                                    font-family: Arial;
                                    font-weight: bold;
                                    text-align: center;
                                    width: 100%;
                                    padding: 0px 0;
                                    margin: 0;
                                } */

    /* select {
                                appearance: none;
                                outline: 0;
                                box-shadow: none;
                                border: 0 !important;
                                background: #0d205f;
                                background-image: none;
                                flex: 1;
                                padding: 0 1em;
                                color: #fff;
                                cursor: pointer;
                                font-size: 1em;
                                font-family: 'Open Sans', sans-serif;
                            } */

    select::-ms-expand {
        display: none;
    }

    .ddlist {
        margin-bottom: 25px;
        margin-left: 25px;
        position: relative;
        display: flex;
        width: 20em;
        height: 3em;
        line-height: 3;
        background: #5c6664;
        overflow: hidden;
        border-radius: .25em;
    }

        .ddlist::after {
            content: '\25BC';
            position: absolute;
            top: 0;
            right: 0;
            padding: 0 1em;
            background: #2b2e2e;
            cursor: pointer;
            pointer-events: none;
            transition: .25s all ease;
        }

        .ddlist:hover::after {
            color: #fff;
        }

    .inputt {
        margin-bottom: 10px;
        display: block;
        width: 20em;
        height: 40px;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
        border-width: 2px;
        border-color: black;
    }

    .buttonn {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        font-weight: bold;
        margin-bottom: 10px;
    }

        .buttonn:hover {
            background-color: #45a049;
        }



    .inputt {
        display: block;
        width: 16em;
        height: 40px;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
        border-width: 2px;
        border-color: black;
    }

    .buttonn {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        font-weight: bold;
    }

        .buttonn:hover {
            background-color: #45a049;
        }

    .chart-container {
        min-width: auto;
        height: 100%;
        overflow-x: auto;
    }

    .chart-wrapper {
        white-space: nowrap;
        display: inline-block;
        border: groove 2px black;
        margin-top: 20px;
    }

    #showDataLabelsBtn {
        background: linear-gradient(135deg, #4CAF50, #2E7D32);
        color: white;
        font-size: 16px;
        font-weight: bold;
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }

    #showDataLabelsBtn:hover {
        background: linear-gradient(135deg, #2E7D32, #1B5E20);
        transform: scale(1.05);
        box-shadow: 0 6px 14px rgba(0, 0, 0, 0.25);
    }

    #showDataLabelsBtn:active {
        transform: scale(0.98);
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }

</style>
<link href="~/css/datatables.datatables.css" rel="stylesheet" />
<link href="~/css/tabel.css" rel="stylesheet" />
<div class="jumbotron center">
    @* <div class="heading">OVER ALL</div> *@
    <div class="container-fluid">
        <div class="row">
            <!-- Column 1 (col-3) -->
            <div class="top-section" style="border: 2px solid gray; margin-top: 5px; padding: 6px; width: 98%;">
                <div style="display: flex; align-items: center; flex-wrap: wrap; justify-content: space-between;">
                    <div style="flex: 1; min-width: 150px; margin-right: 10px;">
                        <label for="groupSelect">Group</label>
                        <select name="format" id="groupSelect" onchange="LoadMeterData()" style="height: 40px; width: 100%;"></select>
                    </div>
                    <div style="flex: 1; min-width: 150px; margin-right: 10px; display:none;">
                        <label for="meterSelect">Meter</label>
                        <select name="format" id="meterSelect" style="height: 40px; width: 100%;"></select>
                    </div>
                    <div style="flex: 1; min-width: 150px; margin-right: 10px; margin-bottom:-10px;">
                        <label for="fromDate">From Date</label>
                        <input class="inputt" type="datetime-local" id="fromDate" style="width: 100%;" />
                    </div>
                    <div style="flex: 1; min-width: 150px; margin-right: 10px; margin-bottom:-10px;">
                        <label for="toDate">To Date</label>
                        <input class="inputt" type="datetime-local" id="toDate" style="width: 100%;" />
                    </div>
                    <div style="flex: 1; min-width: 150px; margin-right: 10px; margin-bottom:-10px;">
                        <label for="txtInterval">Interval (mins)</label>
                        <input class="inputt" type="text" id="txtInterval" value="60" style="width: 100%;" />
                    </div>
                    <div style="display: flex; align-items: center; gap: 10px; margin-bottom:-30px;">
                        <button class="buttonn" id="btnGraph" style="width: 100px;">GRAPH</button>
                        <button class="buttonn" id="btnTable" style="width: 100px;">TABLE</button>
                        <img src="~/assets/images/SaveGraph.png" alt="Export as Image" id="screenshotButton" class="export-btn" />
                    </div>
                </div>



            </div>

            <!-- Column 2 (col-9) -->
            <div class="col-12" style="margin-left:-12px;">
                <div class="chart-container" id="graph_container">
                    <div class="col">
                        <div class="chart-wrapper">
                            <canvas id="myLineChart" width="1631" height="500"></canvas>
                        </div>
                    </div>
                </div>
                <!-- For Table -->
                <div style="display: none;" id="customers_table">
                    <main class="table" style="margin:10px;">
                        <br /><br />
                        <section class="table__body">
                            <table id="dataTable" style="background-color: lightgray; display: none;" class="display">
                                <!-- For Specific -->
                                <thead>
                                    <tr>
                                        <th>METER</th>
                                        <th>DATE&TIME</th>
                                        <th>ACTIVE ENERGY</th>
                                        <th>CONSUMPTION</th>
                                        <th>RY CURRENT</th>
                                        <th>YB CURRENT</th>
                                        <th>BR CURRENT</th>
                                        <th>RY VOLTAGE</th>
                                        <th>YB VOLTAGE</th>
                                        <th>BR VOLTAGE</th>
                                        <th>MAX DEMAND</th>
                                        <th>POWER FACTOR</th>
                                        <th><label for="export-file" id="toCSV" onclick="csvExport()"><img src="~/assets/images/excel.png" alt="" style="height:30px;" title="Export File"></label></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Binding From Function -->
                                </tbody>
                            </table>

                            <table id="dataTable1" style="background-color:lightgray" class="display">
                                <!-- For Overall -->
                                <thead id="th_overall">
                                    <tr>
                                        <th>GROUP NAME</th>
                                        <th>DATE & TIME</th>
                                        <th>CONSUMPTION</th>
                                        <th><label for="export-file" id="toCSV1" onclick="csvExport1()"><img src="~/assets/images/excel.png" alt="" style="height:30px;" title="Export File"></label></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Binding From Function -->
                                </tbody>
                            </table>
                        </section>
                    </main>
                </div>
            </div>
        </div>
    </div>
</div>
<button id="showDataLabelsBtn">Show Data Labels</button>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>

@section Scripts {

    <script>
        var loadCnt = 0;
        var myLineChart; // Declare a global variable for the chart instance

        window.onload = function () {
            preloader.style.display = 'inline-flex';
            LoadGroupData();
            if (loadCnt === 0) {
                LoadMeters('', false);
            }
            var intTime = document.getElementById('txtInterval').value;
            GetDataForGenerateGraph_All("ALLMETERS", "ALLGROUPS", '', '', intTime).then((labels) => {
                if (labels != null) {
                    generateChart_All(labels);
                }
            });

            setTimeout(function () {
                preloader.style.display = 'none';
            }, 5000);
        }

        function LoadMeterData() {
            var data = document.getElementById("groupSelect");
            var selectedOption = data.options[data.selectedIndex];
            var selectedvalue = selectedOption.value;

            if (selectedvalue == 'ALLGROUPS') {
                LoadMeters(selectedvalue, false);
            } else {
                LoadMeters(selectedvalue, true);
            }
            loadCnt = "1";
        }

        function LoadMeters(strGroupId, strCon) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetMetersDtls", "Home")',
                // contentType: "application/json; charset=utf-8",
                data: { strGroupId: strGroupId, strCon: strCon },
                success: function (response) {
                    var ddlMeter = document.getElementById('meterSelect');
                    ddlMeter.innerHTML = "";
                    if (response) {
                        var MetersList = response.mmaster;
                        var selectAllOption = document.createElement('option');
                        selectAllOption.value = "ALLMETERS";
                        selectAllOption.text = "SELECT ALL";
                        ddlMeter.appendChild(selectAllOption);

                        for (let i = 0; i < MetersList.length; i++) {
                            var option = document.createElement('option');
                            option.value = MetersList[i].meterid;
                            option.text = MetersList[i].metername;
                            ddlMeter.appendChild(option);
                        }
                    }
                }
            });
        }

        function LoadGroupData() {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetGroupsWithMeters", "Home")',
                // contentType: "application/json; charset=utf-8",
                success: function (groups) {
                    var ddlGroup = document.getElementById('groupSelect');
                    ddlGroup.innerHTML = "";

                    var selectAllOption = document.createElement('option');
                    selectAllOption.value = "ALLGROUPS";
                    selectAllOption.text = "SELECT ALL";
                    ddlGroup.appendChild(selectAllOption);

                    for (let i = 0; i < groups.length; i++) {
                        var option = document.createElement('option');
                        option.value = groups[i].groupId;
                        option.text = groups[i].groupName;
                        ddlGroup.appendChild(option);
                    }
                }
            });
        }




        document.getElementById('btnGraph').onclick = function () {

            document.getElementById('customers_table').style = 'display:none;';
            document.getElementById('graph_container').style = '';

            var selectedGroup = document.getElementById('groupSelect').value;
            var selectedMeter = document.getElementById('meterSelect').value;
            var StartDate = document.getElementById('fromDate').value;
            var EndDate = document.getElementById('toDate').value;
            var TimeInterval = document.getElementById('txtInterval').value;

            if (selectedMeter !== "ALLMETERS" && selectedGroup !== "ALLGROUPS") {
                GetDataForGenerateGraph(selectedMeter, selectedGroup, StartDate, EndDate, TimeInterval).then((labels) => {
                    if (labels != null) {
                        var sel = document.getElementById('meterSelect');
                        generateChart(labels, sel.options[sel.selectedIndex].text);
                    }
                });
            } else if (selectedGroup = "ALLGROUPS") {
                GetDataForGenerateGraph_All(selectedMeter, selectedGroup, StartDate, EndDate, TimeInterval).then((labels) => {
                    if (labels != null) {
                        generateChart_All(labels);
                    }
                });
            }
        };

        function GetDataForGenerateGraph_All(selectedMeter, selectedGroup, StartDate, EndDate, TimeInterval) {
            return new Promise((resolve, reject) => {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetOverAllIndex_Graph_All", "Graph")',
                    // contentType: "application/json; charset=utf-8",
                    data: { groupId: selectedGroup, strMeterId: selectedMeter, strFD: StartDate, strTD: EndDate, Interval: TimeInterval },
                    success: function (response) {
                        if (response != null) {
                            var labels = {
                                label: response.syncdatetime,
                                datasets: [
                                    {
                                        label: 'BODYSHOP (kWh)',
                                        data: response.bodY_SHOP_ActiveEnergy,
                                        borderColor: 'rgba(75, 192, 192, 1)',
                                        fill: false
                                    },
                                    {
                                            label: 'GENERALASSEMBLY (kWh)',
                                        data: response.generaL_ASSEMBLY_ActiveEnergy,
                                        // borderColor: 'rgba(255, 99, 132, 1)',
                                        borderColor: 'rgba(255, 155, 152, 200)',
                                        fill: false
                                    },
                                    {
                                            label: 'HOSTEDSERVICES (kWh)',
                                        data: response.hosteD_SERVICES_ActiveEnergy,
                                        borderColor: 'rgba(54, 162, 235, 1)',
                                        fill: false
                                    },
                                    {
                                            label: 'PAINTSHOP (kWh)',
                                        data: response.painT_SHOP_ActiveEnergy,
                                        borderColor: 'rgba(255, 206, 86, 1)',
                                        fill: false
                                    },
                                    // {
                                    //     label: 'TRANSFORMERWISE (kWh)',
                                    //     data: response.transformeR_WISE_ActiveEnergy,
                                    //     borderColor: 'rgba(75, 192, 192, 1)',
                                    //     fill: false
                                    // },
                                    {
                                        label: 'UTILITIES (kWh)',
                                        data: response.utilitieS_ActiveEnergy,
                                        borderColor: 'rgba(153, 102, 255, 1)',
                                        fill: false
                                    }
                                ]
                            };
                            resolve(labels);
                        } else {
                            resolve(null);
                        }
                    },
                    error: function (error) {
                        reject(error);
                    }
                });
            });
        }

        let targetLineValue = 60;//document.getElementById('targetValue').value;

        function drawHorizontalLine(chartInstance, value, color) {
            const yScale = chartInstance.scales.y;
            const yPos = yScale.getPixelForValue(value);

            chartInstance.ctx.save();
            chartInstance.ctx.beginPath();
            chartInstance.ctx.moveTo(chartInstance.chartArea.left, yPos);
            chartInstance.ctx.lineTo(chartInstance.chartArea.right, yPos);
            chartInstance.ctx.strokeStyle = color;
            chartInstance.ctx.lineWidth = 1;
            chartInstance.ctx.shadowColor = color;
            chartInstance.ctx.shadowBlur = 10;
            chartInstance.ctx.stroke();
            chartInstance.ctx.restore();
        }

        // function generateChart_All(labels) {
        //     var ctx = document.getElementById('myLineChart').getContext('2d');

        //     if (myLineChart) {
        //         myLineChart.destroy(); // Destroy the existing chart instance
        //     }
        //     myLineChart = new Chart(ctx, {
        //         type: 'line',
        //         data: {
        //             labels: labels.label,
        //             datasets: labels.datasets
        //         },
        //         options: {
        //             responsive: true,
        //             scales: {
        //                 x: {
        //                     title: {
        //                         display: true,
        //                         text: 'TIMING',
        //                         font: {
        //                             size: 20,
        //                             weight: 'bold',
        //                             family: 'Arial'
        //                         },
        //                         color: 'darkblue'
        //                     }
        //                 },
        //                 y: {
        //                     title: {
        //                         display: true,
        //                         text: 'UNITS',
        //                         font: {
        //                             size: 20,
        //                             weight: 'bold',
        //                             family: 'Arial'
        //                         },
        //                         color: 'darkblue'
        //                     },
        //                     beginAtZero: true
        //                 }
        //             },
        //             plugins: {
        //                 legend: {
        //                     display: true,
        //                     position: 'left',
        //                     labels: {
        //                         boxWidth: 20,
        //                         padding: 15,
        //                         font: {
        //                             size: 14,
        //                             family: 'Arial'
        //                         },
        //                         color: 'black'
        //                     }
        //                 },
        //                 annotation: {
        //                     annotations: {
        //                         line1: {
        //                             type: 'line',
        //                             yMin: targetLineValue,
        //                             yMax: targetLineValue,
        //                             borderColor: 'red',
        //                             borderWidth: 2,
        //                             label: {
        //                                 content: 'Target',
        //                                 enabled: true,
        //                                 position: 'end'
        //                             }
        //                         }
        //                     }
        //                 }
        //             }
        //         },
        //         plugins: [
        //             {
        //             id: 'targetLine',
        //             afterDraw: (chart) => {
        //                 drawHorizontalLine(chart, targetLineValue, '#FFFFFF');
        //             }
        //         }]
        //     });

        // }



        function generateChart_All(labels) {
            var ctx = document.getElementById('myLineChart').getContext('2d');

            if (myLineChart) {
                myLineChart.destroy(); // Destroy the existing chart instance
            }

            myLineChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels.label,
                    datasets: labels.datasets.map(dataset => ({
                        ...dataset,
                        pointBackgroundColor: 'rgba(75, 192, 192, 1)', // Colored points
                        pointBorderColor: '#fff', // Border color for points
                        pointRadius: 5, // Size of the points
                        pointHoverRadius: 7, // Size of points on hover
                    }))
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'TIMING',
                                font: {
                                    size: 20,
                                    weight: 'bold',
                                    family: 'Arial'
                                },
                                color: 'darkblue'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'UNITS',
                                font: {
                                    size: 20,
                                    weight: 'bold',
                                    family: 'Arial'
                                },
                                color: 'darkblue'
                            },
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        legend: {
                            display: true,
                            position: 'left',
                            labels: {
                                boxWidth: 20,
                                padding: 15,
                                font: {
                                    size: 14,
                                    family: 'Arial'
                                },
                                color: 'black'
                            }
                        },
                        datalabels: {
                            display: false,
                            color: 'black',
                            align: 'top',
                            offset: 10,
                            font: {
                                size: 12,
                                weight: 'bold'
                            },
                            formatter: function (value) {
                                return (typeof value === 'number' && !isNaN(value)) ? value.toFixed(2) : value; // Check if value is a valid number
                            }

                        },
                        annotation: {
                            annotations: {
                                line1: {
                                    type: 'line',
                                    yMin: targetLineValue,
                                    yMax: targetLineValue,
                                    borderColor: 'red',
                                    borderWidth: 2,
                                    label: {
                                        content: 'Target',
                                        enabled: true,
                                        position: 'end'
                                    }
                                }
                            }
                        }
                    }
                },
                plugins: [ChartDataLabels] // Enable the DataLabels plugin
            });
        }

        function generateChart(labels, name) {
            var ctx = document.getElementById('myLineChart').getContext('2d');

            if (myLineChart) {
                myLineChart.destroy(); // Destroy the existing chart instance
            }

            myLineChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels.label,
                    datasets: [{
                        label: name,
                        data: labels.data,
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 2,
                        fill: false,
                        pointBackgroundColor: 'rgba(75, 192, 192, 1)', // Colored points
                        pointBorderColor: '#fff', // Border color for points
                        pointRadius: 5, // Size of the points
                        pointHoverRadius: 7, // Size of points on hover
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            display: true,
                            title: {
                                display: true,
                                text: 'TIMING',
                                font: {
                                    size: 20,
                                    weight: 'bold',
                                    family: 'Arial'
                                },
                                color: 'darkblue'
                            }
                        },
                        y: {
                            display: true,
                            title: {
                                display: true,
                                text: 'UNITS',
                                font: {
                                    size: 20,
                                    weight: 'bold',
                                    family: 'Arial'
                                },
                                color: 'darkblue'
                            }
                        }
                    },
                    plugins: {
                        datalabels: {
                            display: false,
                            color: 'black',
                            align: 'top',
                            offset: 10,
                            font: {
                                size: 12,
                                weight: 'bold'
                            },
                            formatter: function (value) {
                                return value.toFixed(2); // Format the value to 2 decimal places
                            }
                        }
                    }
                },
                plugins: [ChartDataLabels] // Enable the DataLabels plugin
            });
        }
        document.getElementById('showDataLabelsBtn').addEventListener('click', function () {
            let datalabelsVisible = myLineChart.options.plugins.datalabels.display;
            myLineChart.options.plugins.datalabels.display = !datalabelsVisible; // Toggle visibility
            myLineChart.update(); // Update chart
            this.innerText = datalabelsVisible ? 'Show Data Labels' : 'Hide Data Labels'; // Toggle button text
        });


        function GetDataForGenerateGraph(selectedMeter, selectedGroup, StartDate, EndDate, TimeInterval) {
            return new Promise((resolve, reject) => {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetOverAllIndex_Graph", "Graph")',
                    // contentType: "application/json; charset=utf-8",
                    data: { groupId: selectedGroup, strMeterId: selectedMeter, strFD: StartDate, strTD: EndDate, Interval: TimeInterval },
                    success: function (response) {
                        var data = response.activeenergy;
                        if (data != null) {
                            var label = response.syncdatetime; // Example label, you can change this as needed.
                            var labels = {
                                label: label,
                                data: data
                            };
                            resolve(labels);
                        } else {
                            resolve(null);
                        }
                    },
                    error: function (error) {
                        reject(error);
                    }
                });
            });
        }

        // function generateChart(labels, name) {
        //     var ctx = document.getElementById('myLineChart').getContext('2d');

        //     if (myLineChart) {
        //         myLineChart.destroy(); // Destroy the existing chart instance
        //     }

        //     myLineChart = new Chart(ctx, {
        //         type: 'line',
        //         data: {
        //             labels: labels.label,
        //             datasets: [{
        //                 label: name,
        //                 data: labels.data,
        //                 borderColor: 'rgba(75, 192, 192, 1)',
        //                 borderWidth: 2,
        //                 fill: false
        //             }]
        //         },
        //         options: {
        //             responsive: true,
        //             scales: {
        //                 x: {
        //                     display: true,
        //                     title: {
        //                         display: true,
        //                         text: 'TIMING',
        //                         font: {
        //                             size: 20,
        //                             weight: 'bold',
        //                             family: 'Arial'
        //                         },
        //                         color: 'darkblue'
        //                     }
        //                 },
        //                 y: {
        //                     display: true,
        //                     title: {
        //                         display: true,
        //                         text: 'UNITS',
        //                         font: {
        //                             size: 20,
        //                             weight: 'bold',
        //                             family: 'Arial'
        //                         },
        //                         color: 'darkblue'
        //                     }
        //                 }
        //             }
        //         }
        //     });
        // }


        let dt = $('#dataTable tbody');
        let dt1 = $('#dataTable1 tbody');

        ///Table View Scripts
        function LoadTableData_Specific(strMId, strFDate, strTDate) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetTableData", "Graph")',
                data: { strId: strMId, strFD: strFDate, strTD: strTDate },
                success: function (response) {
                    if (response) {
                        var tbody1 = $('#dataTable tbody');

                        // Clear existing rows
                        tbody1.empty();

                        for (let i = 0; i < response.consumption.length; i++) {
                            // Create a new row
                            var row = `<tr>
                                                            <td>${response.meterName[i]}</td>
                                                            <td>${response.dateAndTime[i]}</td>
                                                            <td>${response.activeEnergy[i]}</td>
                                                            <td>${response.consumption[i]}</td>
                                                            <td>${response.current_A[i]}</td>
                                                            <td>${response.current_B[i]}</td>
                                                            <td>${response.current_C[i]}</td>
                                                            <td>${response.voltage_A[i]}</td>
                                                            <td>${response.voltage_B[i]}</td>
                                                            <td>${response.voltage_C[i]}</td>
                                                            <td>${response.maxDemand[i]}</td>
                                                            <td>${response.powerFactor[i]}</td>
                                                       </tr>`;
                            // Append the row to the table body
                            tbody1.append(row);
                        }
                    } else {
                        alert('No Data Found.');
                    }
                },
                error: function (err) {
                    alert('Error : ' + err);
                }
            });
        }

            function LoadTableData_Overall(strGId, strFDate, strTDate) {
                debugger;
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetTableData_Overall", "Graph")',
                    data: { strGroup: strGId, strFD: strFDate, strTD: strTDate },
                    success: function (response) {
                        var tbody2 = $('#dataTable1 tbody');
                        var tbody3 = $('#dataTable2 tbody');
                        tbody2.empty(); // Clear existing rows before adding new ones
                        tbody3.empty();
                        $('#dataTable1').hide();
                        $('#dataTable2').hide();
                        if (response) {
                            if (strGId === "ALLGROUPS") {
                                $('#dataTable1').show();  // Show #dataTable1
                                $('#dataTable2').hide();  // Hide #dataTable2

                                for (let i = 0; i < response.group.length; i++) {
                                    const row = `<tr>
                                                                <td>${response.group[i]}</td>
                                                                <td>${response.datetime[i]}</td>
                                                                <td>${response.consumption[i]}</td>
                                                            </tr>`;
                                    tbody2.append(row); // Append the new row for each entry in #dataTable1
                                }
                            } else {
                                $('#dataTable1').hide();  // Hide #dataTable1
                                $('#dataTable2').show();  // Show #dataTable2

                                for (let i = 0; i < response.group.length; i++) {
                                    const row = `<tr>
                                                                <td>${response.group[i]}</td>
                                                                <td>${response.datetime[i]}</td>
                                                                <td>${response.consumption[i]}</td>
                                                            </tr>`;
                                    tbody3.append(row); // Append the new row for each entry in #dataTable2
                                }
                            }
                        }
                    },
                    error: function (err) {
                        alert("Error: " + err.responseText);
                    }
                });
            }




            // function LoadTableData_Overall(strGId, strFDate, strTDate) {
            //     debugger;
            //     $.ajax({
            //         type: 'POST',
            //         url: '@Url.Action("GetTableData_Overall", "Graph")',
            //         data: { strGroup: strGId, strFD: strFDate, strTD: strTDate },
            //         success: function (response) {
            //             var tbody2 = $('#dataTable1 tbody');
            //             var tbody3 = $('#dataTable2 tbody');
            //             tbody2.empty(); // Clear existing rows before adding new ones
            //             tbody3.empty();
            //             if (response) {
            //                 if (strGroup == "ALLGROUPS") {
            //                     for (let i = 0; i < response.group.length; i++) {
            //                         const row = `<tr>
            //                                                 <td>${response.group[i]}</td>
            //                                                 <td>${response.datetime[i]}</td>
            //                                                 <td>${response.consumption[i]}</td>
            //                                             </tr>`;
            //                         tbody2.append(row); // Append the new row for each entry
            //                     }
            //                 }
            //                 else
            //                 {
            //                     for (let i = 0; i < response.group.length; i++) {
            //                         const row = `<tr>
            //                                                             <td>${response.group[i]}</td>
            //                                                             <td>${response.datetime[i]}</td>
            //                                                             <td>${response.consumption[i]}</td>
            //                                                         </tr>`;

            //                         tbody3.append(row); // Append the new row for each entry
            //                     }
            //                 }

            //             }
            //         },
            //         error: function (err) {
            //             alert("Error: " + err.responseText);
            //         }
            //     });
            // }

        // function LoadTableData_Overall(strGId, strFDate, strTDate) {
        //     debugger;
        //     $.ajax({
        //         type: 'POST',
        //         url: '@Url.Action("GetTableData_Overall", "Graph")',
        //         data: { strGroup: strGId, strFD: strFDate, strTD: strTDate },
        //         success: function (response) {
        //             // const tableBody = dt1.tbody;//document.getElementById('#dataTable1 tbody');
        //             var tbody2 = $('#dataTable1 tbody');
        //             const row = document.createElement('tr');
        //             if (response) {
        //                 row.innerHTML = `<tr>
        //                                             <td>${response.group}</td>
        //                                             <td>${response.datetime}</td>
        //                                             <td>${response.consumption}</td>
        //                                         </tr>`;
        //                 tbody2.append(row);
        //             }
        //         },
        //         Error: function (err) {
        //             alert(err);
        //         }
        //     });
        // }

        document.getElementById('btnTable').onclick = function () {
            document.getElementById('customers_table').style = '';
            document.getElementById('graph_container').style = 'display:none;';

            var selectedGroup = document.getElementById('groupSelect').value;
            var selectedMeter = document.getElementById('meterSelect').value;
            var StartDate = document.getElementById('fromDate').value;
            var EndDate = document.getElementById('toDate').value;
            var TimeInterval = document.getElementById('txtInterval').value;

            if (selectedMeter != "ALLMETERS" && selectedGroup != "ALLGROUPS") {
                //GetDataForGenerateGraph(selectedMeter, selectedGroup, StartDate, EndDate, TimeInterval).then((labels) => {
                //    if (labels != null) {
                //        generateChart(labels);
                //    }
                //});
                document.getElementById('dataTable').style = '';
                document.getElementById('dataTable1').style = 'display:none;';
                LoadTableData_Specific(selectedMeter, StartDate, EndDate);

            } else if (selectedGroup != "ALLGROUPS") {
                //GetDataForGenerateGraph_All(selectedMeter, selectedGroup, StartDate, EndDate, TimeInterval).then((labels) => {
                //    if (labels != null) {
                //        generateChart_All(labels);
                //    }
                //});
                //document.getElementById('th_specific').style = '';
                //document.getElementById('th_overall').style = 'display:none;';


                // var x = document.getElementById('groupSelect');
                // var txt = '';
                // var i;
                // $('#dataTable1 tbody').empty();
                // // for (i = 0; i < x.length; i++) {
                    txt = selectedGroup;
                    // if (txt == "ALLGROUPS") {
                        LoadTableData_Overall(txt, StartDate, EndDate);
                    // }

                // }

            }
                else if (selectedGroup == "ALLGROUPS")
                {

                    var x = document.getElementById('groupSelect');
                    var txt = '';
                    var i;
                    $('#dataTable1 tbody').empty();
                     for (i = 0; i < x.length; i++) {
                    txt = x.options[i].value;
                    if (txt == "ALLGROUPS") {
                      LoadTableData_Overall(txt, StartDate, EndDate);
                    }

                    }
                }
        };
            function csvExport2() {
                const table = document.getElementById('dataTable2');
                const data = toCSV(table);
                var selectedGroup = document.getElementById('groupSelect').innerHTML;
                downloadXLSX(data, selectedGroup+' OverAllMeter_Export');
            }

        function csvExport1() {
            const table = document.getElementById('dataTable1');
            const data = toCSV(table);
            downloadXLSX(data, 'OverAll_Export');
        }

        function csvExport() {
            const table = document.getElementById('dataTable');
            const data = toCSV(table);
            downloadXLSX(data, 'Specific_Export');
        }

        const csv_btn = document.querySelector('#toCSV');
        const toCSV = function (table) {
            const t_heads = table.querySelectorAll('th'),
                tbody_rows = table.querySelectorAll('tbody tr');
            // Capture and format headings
            const headings = [...t_heads].map(head => head.textContent.trim().toUpperCase());
            // Capture and format table data
            const table_data = [...tbody_rows].map(row => {
                const cells = row.querySelectorAll('td');
                const cells_data = [...cells].map(cell => cell.textContent.trim());
                return cells_data;
            });
            return [headings, ...table_data];
        }
        const downloadXLSX = (data, fileName) => {
            const ws = XLSX.utils.aoa_to_sheet(data);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'OverAll_Export');
            XLSX.writeFile(wb, `${fileName}.xlsx`);
        }
        //csv_btn.onclick = () => {
        //    const table = document.getElementById('dataTable');
        //    const data = toCSV(table);
        //    downloadXLSX(data, 'OverAll_Export');
        //}

        document.getElementById('screenshotButton').addEventListener('click', function () {
                   var dt = new Date();
                   var time =
                       ' ' +
                       dt.getDate() +
                       '/' +
                       (dt.getMonth() + 1) + // Adjusted to display correct month (0-indexed)
                       '/' +
                       dt.getFullYear() +
                       ' ' +
                       dt.getHours() +
                       ':' +
                       dt.getMinutes() +
                       ':' +
                       dt.getSeconds();

                   // Select only the specific div
                    var targetDiv = document.querySelector('.col');

                    // Pass the target element to html2canvas
                    html2canvas(targetDiv).then(function (canvas) {
                        const link = document.createElement('a');
                        link.download = 'OverAll_Graph_' + time + '.png';
                        link.href = canvas.toDataURL();
                        link.click();
                    });
               });

    </script>

}
